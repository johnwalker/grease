* Junction
  A junction is another way of operating on the variables within a
  bundle, except by name rather than by position.  When you open a
  junction, the variables in the bundle being operated on are exposed
  directly in the junction's namespace by the names currently assigned
  to them.
  
  A junction is ultimately a task, and therefore has a type.  The
  argument type is a bundle typeclass that provides the names used
  inside of the junction.  The return type is the type of the variable
  that is written to the special variable 'return' inside of the
  junction body.

** Syntax
   A junction is a list of task streams inside of curly braces '{}'.

** Practice Note
   Junctions are typically used to define named tasks that provide
   more advanced functionality - much like functions in other
   programming languages.  Because the compiler doesn't do a whole
   lot to check that the prototype is correct (mostly because there
   isn't one), it is advisable to prefix and postfix your junctions
   that are intended to be function units with ensure statements that
   check the argument and return types.  This will not only prevent
   mistakes by you, the implementor of the task, but also by the user
   of the task.

*** Example
    
#+BEGIN_SRC Grease
ensure (types, be, here, ...)
(:names, :be, :here, ...)
{
    # my_code
}
ensure (return, types, be, here, ...)
:my_task;
#+END_SRC
